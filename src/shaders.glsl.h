#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline: sokol-shdc --input assets/shaders.glsl --output src/shaders.glsl.h --slang metal_macos

    Overview:

        Shader program 'pbr_display':
            Get shader desc: pbr_display_shader_desc(sg_query_backend());
            Vertex shader: display_vs
                Attribute slots:
                    ATTR_display_vs_position = 0
                    ATTR_display_vs_texcoord = 1
            Fragment shader: display_fs
                Image 'tex_cube':
                    Type: SG_IMAGETYPE_CUBE
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_tex_cube = 0

        Shader program 'pbr_shader':
            Get shader desc: pbr_shader_shader_desc(sg_query_backend());
            Vertex shader: cubemap_vs
                Attribute slots:
                    ATTR_cubemap_vs_position = 0
                Uniform block 'cubemap_uniforms':
                    C struct: cubemap_uniforms_t
                    Bind slot: SLOT_cubemap_uniforms = 0
            Fragment shader: cubemap_fs
                Image 'tex':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_tex = 0


    Shader descriptor structs:

        sg_shader pbr_display = sg_make_shader(pbr_display_shader_desc(sg_query_backend()));
        sg_shader pbr_shader = sg_make_shader(pbr_shader_shader_desc(sg_query_backend()));

    Vertex attribute locations for vertex shader 'cubemap_vs':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_cubemap_vs_position] = { ... },
                },
            },
            ...});

    Vertex attribute locations for vertex shader 'display_vs':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_display_vs_position] = { ... },
                    [ATTR_display_vs_texcoord] = { ... },
                },
            },
            ...});

    Image bind slots, use as index in sg_bindings.vs_images[] or .fs_images[]

        SLOT_tex = 0;
        SLOT_tex_cube = 0;

    Bind slot and C-struct for uniform block 'cubemap_uniforms':

        cubemap_uniforms_t cubemap_uniforms = {
            .projection = ...;
            .view = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_cubemap_uniforms, &SG_RANGE(cubemap_uniforms));

*/
#include <stdint.h>
#include <stdbool.h>
#include <string.h>
#include <stddef.h>
#if !defined(SOKOL_SHDC_ALIGN)
  #if defined(_MSC_VER)
    #define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
  #else
    #define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
  #endif
#endif
#define ATTR_cubemap_vs_position (0)
#define ATTR_display_vs_position (0)
#define ATTR_display_vs_texcoord (1)
#define SLOT_tex (0)
#define SLOT_tex_cube (0)
#define SLOT_cubemap_uniforms (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct cubemap_uniforms_t {
    float projection[16];
    float view[16];
} cubemap_uniforms_t;
#pragma pack(pop)
/*
    #include <metal_stdlib>
    #include <simd/simd.h>
    
    using namespace metal;
    
    struct cubemap_uniforms
    {
        float4x4 projection;
        float4x4 view;
    };
    
    struct main0_out
    {
        float3 localPos [[user(locn0)]];
        float4 gl_Position [[position]];
    };
    
    struct main0_in
    {
        float3 position [[attribute(0)]];
    };
    
    #line 18 "assets/shaders.glsl"
    vertex main0_out main0(main0_in in [[stage_in]], constant cubemap_uniforms& _27 [[buffer(0)]])
    {
        main0_out out = {};
    #line 18 "assets/shaders.glsl"
        out.localPos = in.position;
    #line 19 "assets/shaders.glsl"
        out.gl_Position = (_27.projection * _27.view) * float4(in.position, 1.0);
        return out;
    }
    
*/
static const char cubemap_vs_source_metal_macos[647] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x63,
    0x75,0x62,0x65,0x6d,0x61,0x70,0x5f,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x73,0x0a,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x70,
    0x72,0x6f,0x6a,0x65,0x63,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x76,0x69,0x65,0x77,0x3b,0x0a,0x7d,0x3b,
    0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,
    0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,
    0x6c,0x6f,0x63,0x61,0x6c,0x50,0x6f,0x73,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,
    0x6c,0x6f,0x63,0x6e,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x34,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,
    0x20,0x5b,0x5b,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x5d,0x5d,0x3b,0x0a,0x7d,
    0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,
    0x69,0x6e,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,
    0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x5b,0x5b,0x61,0x74,0x74,0x72,0x69,
    0x62,0x75,0x74,0x65,0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x23,
    0x6c,0x69,0x6e,0x65,0x20,0x31,0x38,0x20,0x22,0x61,0x73,0x73,0x65,0x74,0x73,0x2f,
    0x73,0x68,0x61,0x64,0x65,0x72,0x73,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x76,0x65,
    0x72,0x74,0x65,0x78,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6d,
    0x61,0x69,0x6e,0x30,0x28,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x20,0x69,0x6e,
    0x20,0x5b,0x5b,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x5d,0x5d,0x2c,0x20,0x63,
    0x6f,0x6e,0x73,0x74,0x61,0x6e,0x74,0x20,0x63,0x75,0x62,0x65,0x6d,0x61,0x70,0x5f,
    0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x73,0x26,0x20,0x5f,0x32,0x37,0x20,0x5b,0x5b,
    0x62,0x75,0x66,0x66,0x65,0x72,0x28,0x30,0x29,0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6f,0x75,0x74,
    0x20,0x3d,0x20,0x7b,0x7d,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x38,0x20,
    0x22,0x61,0x73,0x73,0x65,0x74,0x73,0x2f,0x73,0x68,0x61,0x64,0x65,0x72,0x73,0x2e,
    0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x6c,0x6f,
    0x63,0x61,0x6c,0x50,0x6f,0x73,0x20,0x3d,0x20,0x69,0x6e,0x2e,0x70,0x6f,0x73,0x69,
    0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x39,0x20,0x22,
    0x61,0x73,0x73,0x65,0x74,0x73,0x2f,0x73,0x68,0x61,0x64,0x65,0x72,0x73,0x2e,0x67,
    0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x67,0x6c,0x5f,
    0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x28,0x5f,0x32,0x37,0x2e,
    0x70,0x72,0x6f,0x6a,0x65,0x63,0x74,0x69,0x6f,0x6e,0x20,0x2a,0x20,0x5f,0x32,0x37,
    0x2e,0x76,0x69,0x65,0x77,0x29,0x20,0x2a,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,
    0x69,0x6e,0x2e,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x31,0x2e,0x30,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6f,0x75,
    0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #pragma clang diagnostic ignored "-Wmissing-prototypes"
    
    #include <metal_stdlib>
    #include <simd/simd.h>
    
    using namespace metal;
    
    struct main0_out
    {
        float4 fragColor [[color(0)]];
    };
    
    struct main0_in
    {
        float3 localPos [[user(locn0)]];
    };
    
    #line 15 "assets/shaders.glsl"
    static inline __attribute__((always_inline))
    float2 SampleSphericalMap(thread const float3& v)
    {
    #line 15 "assets/shaders.glsl"
    #line 16 "assets/shaders.glsl"
    #line 17 "assets/shaders.glsl"
    #line 18 "assets/shaders.glsl"
        return (float2(precise::atan2(v.z, v.x), asin(v.y)) * float2(0.159099996089935302734375, 0.3183000087738037109375)) + float2(0.5);
    }
    
    #line 23 "assets/shaders.glsl"
    fragment main0_out main0(main0_in in [[stage_in]], texture2d<float> tex [[texture(0)]], sampler texSmplr [[sampler(0)]])
    {
        main0_out out = {};
    #line 23 "assets/shaders.glsl"
        float3 param = fast::normalize(in.localPos);
    #line 24 "assets/shaders.glsl"
    #line 25 "assets/shaders.glsl"
        out.fragColor = float4(tex.sample(texSmplr, SampleSphericalMap(param)).xyz, 1.0);
        return out;
    }
    
*/
static const char cubemap_fs_source_metal_macos[1062] = {
    0x23,0x70,0x72,0x61,0x67,0x6d,0x61,0x20,0x63,0x6c,0x61,0x6e,0x67,0x20,0x64,0x69,
    0x61,0x67,0x6e,0x6f,0x73,0x74,0x69,0x63,0x20,0x69,0x67,0x6e,0x6f,0x72,0x65,0x64,
    0x20,0x22,0x2d,0x57,0x6d,0x69,0x73,0x73,0x69,0x6e,0x67,0x2d,0x70,0x72,0x6f,0x74,
    0x6f,0x74,0x79,0x70,0x65,0x73,0x22,0x0a,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,
    0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,
    0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,
    0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,
    0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,
    0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,
    0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x66,
    0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x5b,0x5b,0x63,0x6f,0x6c,0x6f,0x72,
    0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,
    0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x6c,0x6f,0x63,0x61,0x6c,0x50,0x6f,0x73,
    0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x30,0x29,0x5d,0x5d,
    0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x35,0x20,0x22,
    0x61,0x73,0x73,0x65,0x74,0x73,0x2f,0x73,0x68,0x61,0x64,0x65,0x72,0x73,0x2e,0x67,
    0x6c,0x73,0x6c,0x22,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x69,0x6e,0x6c,0x69,
    0x6e,0x65,0x20,0x5f,0x5f,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x5f,0x5f,
    0x28,0x28,0x61,0x6c,0x77,0x61,0x79,0x73,0x5f,0x69,0x6e,0x6c,0x69,0x6e,0x65,0x29,
    0x29,0x0a,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x53,0x61,0x6d,0x70,0x6c,0x65,0x53,
    0x70,0x68,0x65,0x72,0x69,0x63,0x61,0x6c,0x4d,0x61,0x70,0x28,0x74,0x68,0x72,0x65,
    0x61,0x64,0x20,0x63,0x6f,0x6e,0x73,0x74,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x26,
    0x20,0x76,0x29,0x0a,0x7b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x35,0x20,0x22,
    0x61,0x73,0x73,0x65,0x74,0x73,0x2f,0x73,0x68,0x61,0x64,0x65,0x72,0x73,0x2e,0x67,
    0x6c,0x73,0x6c,0x22,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x36,0x20,0x22,0x61,
    0x73,0x73,0x65,0x74,0x73,0x2f,0x73,0x68,0x61,0x64,0x65,0x72,0x73,0x2e,0x67,0x6c,
    0x73,0x6c,0x22,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x37,0x20,0x22,0x61,0x73,
    0x73,0x65,0x74,0x73,0x2f,0x73,0x68,0x61,0x64,0x65,0x72,0x73,0x2e,0x67,0x6c,0x73,
    0x6c,0x22,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x38,0x20,0x22,0x61,0x73,0x73,
    0x65,0x74,0x73,0x2f,0x73,0x68,0x61,0x64,0x65,0x72,0x73,0x2e,0x67,0x6c,0x73,0x6c,
    0x22,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x28,0x66,0x6c,
    0x6f,0x61,0x74,0x32,0x28,0x70,0x72,0x65,0x63,0x69,0x73,0x65,0x3a,0x3a,0x61,0x74,
    0x61,0x6e,0x32,0x28,0x76,0x2e,0x7a,0x2c,0x20,0x76,0x2e,0x78,0x29,0x2c,0x20,0x61,
    0x73,0x69,0x6e,0x28,0x76,0x2e,0x79,0x29,0x29,0x20,0x2a,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x32,0x28,0x30,0x2e,0x31,0x35,0x39,0x30,0x39,0x39,0x39,0x39,0x36,0x30,0x38,
    0x39,0x39,0x33,0x35,0x33,0x30,0x32,0x37,0x33,0x34,0x33,0x37,0x35,0x2c,0x20,0x30,
    0x2e,0x33,0x31,0x38,0x33,0x30,0x30,0x30,0x30,0x38,0x37,0x37,0x33,0x38,0x30,0x33,
    0x37,0x31,0x30,0x39,0x33,0x37,0x35,0x29,0x29,0x20,0x2b,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x32,0x28,0x30,0x2e,0x35,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x23,0x6c,0x69,0x6e,
    0x65,0x20,0x32,0x33,0x20,0x22,0x61,0x73,0x73,0x65,0x74,0x73,0x2f,0x73,0x68,0x61,
    0x64,0x65,0x72,0x73,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x66,0x72,0x61,0x67,0x6d,
    0x65,0x6e,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,
    0x69,0x6e,0x30,0x28,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,
    0x5b,0x5b,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x5d,0x5d,0x2c,0x20,0x74,0x65,
    0x78,0x74,0x75,0x72,0x65,0x32,0x64,0x3c,0x66,0x6c,0x6f,0x61,0x74,0x3e,0x20,0x74,
    0x65,0x78,0x20,0x5b,0x5b,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x30,0x29,0x5d,
    0x5d,0x2c,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x74,0x65,0x78,0x53,0x6d,
    0x70,0x6c,0x72,0x20,0x5b,0x5b,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x28,0x30,0x29,
    0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,
    0x6f,0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,0x20,0x7b,0x7d,0x3b,0x0a,0x23,0x6c,
    0x69,0x6e,0x65,0x20,0x32,0x33,0x20,0x22,0x61,0x73,0x73,0x65,0x74,0x73,0x2f,0x73,
    0x68,0x61,0x64,0x65,0x72,0x73,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,
    0x66,0x61,0x73,0x74,0x3a,0x3a,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,
    0x69,0x6e,0x2e,0x6c,0x6f,0x63,0x61,0x6c,0x50,0x6f,0x73,0x29,0x3b,0x0a,0x23,0x6c,
    0x69,0x6e,0x65,0x20,0x32,0x34,0x20,0x22,0x61,0x73,0x73,0x65,0x74,0x73,0x2f,0x73,
    0x68,0x61,0x64,0x65,0x72,0x73,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x23,0x6c,0x69,
    0x6e,0x65,0x20,0x32,0x35,0x20,0x22,0x61,0x73,0x73,0x65,0x74,0x73,0x2f,0x73,0x68,
    0x61,0x64,0x65,0x72,0x73,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,0x20,
    0x6f,0x75,0x74,0x2e,0x66,0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x74,0x65,0x78,0x2e,0x73,0x61,0x6d,0x70,0x6c,
    0x65,0x28,0x74,0x65,0x78,0x53,0x6d,0x70,0x6c,0x72,0x2c,0x20,0x53,0x61,0x6d,0x70,
    0x6c,0x65,0x53,0x70,0x68,0x65,0x72,0x69,0x63,0x61,0x6c,0x4d,0x61,0x70,0x28,0x70,
    0x61,0x72,0x61,0x6d,0x29,0x29,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x31,0x2e,0x30,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6f,0x75,0x74,
    0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #include <metal_stdlib>
    #include <simd/simd.h>
    
    using namespace metal;
    
    struct main0_out
    {
        float2 v_texcoord [[user(locn0)]];
        float4 gl_Position [[position]];
    };
    
    struct main0_in
    {
        float2 position [[attribute(0)]];
        float2 texcoord [[attribute(1)]];
    };
    
    #line 13 "assets/shaders.glsl"
    vertex main0_out main0(main0_in in [[stage_in]])
    {
        main0_out out = {};
    #line 13 "assets/shaders.glsl"
        out.gl_Position = float4(in.position, 0.0, 1.0);
    #line 14 "assets/shaders.glsl"
        out.v_texcoord = in.texcoord;
        return out;
    }
    
*/
static const char display_vs_source_metal_macos[544] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,
    0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x32,0x20,0x76,0x5f,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,
    0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x30,0x29,0x5d,0x5d,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,0x6c,0x5f,
    0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x5b,0x5b,0x70,0x6f,0x73,0x69,0x74,
    0x69,0x6f,0x6e,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,
    0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,
    0x20,0x5b,0x5b,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x28,0x30,0x29,0x5d,
    0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x74,0x65,
    0x78,0x63,0x6f,0x6f,0x72,0x64,0x20,0x5b,0x5b,0x61,0x74,0x74,0x72,0x69,0x62,0x75,
    0x74,0x65,0x28,0x31,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x23,0x6c,0x69,
    0x6e,0x65,0x20,0x31,0x33,0x20,0x22,0x61,0x73,0x73,0x65,0x74,0x73,0x2f,0x73,0x68,
    0x61,0x64,0x65,0x72,0x73,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x76,0x65,0x72,0x74,
    0x65,0x78,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,
    0x6e,0x30,0x28,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,0x5b,
    0x5b,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6f,0x75,0x74,
    0x20,0x3d,0x20,0x7b,0x7d,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x33,0x20,
    0x22,0x61,0x73,0x73,0x65,0x74,0x73,0x2f,0x73,0x68,0x61,0x64,0x65,0x72,0x73,0x2e,
    0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x67,0x6c,
    0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x34,0x28,0x69,0x6e,0x2e,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,
    0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,
    0x20,0x31,0x34,0x20,0x22,0x61,0x73,0x73,0x65,0x74,0x73,0x2f,0x73,0x68,0x61,0x64,
    0x65,0x72,0x73,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,
    0x74,0x2e,0x76,0x5f,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x20,0x3d,0x20,0x69,
    0x6e,0x2e,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6f,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,

};
/*
    #include <metal_stdlib>
    #include <simd/simd.h>
    
    using namespace metal;
    
    struct main0_out
    {
        float4 fragColor [[color(0)]];
    };
    
    struct main0_in
    {
        float2 v_texcoord [[user(locn0)]];
    };
    
    #line 14 "assets/shaders.glsl"
    fragment main0_out main0(main0_in in [[stage_in]], texturecube<float> tex_cube [[texture(0)]], sampler tex_cubeSmplr [[sampler(0)]])
    {
        main0_out out = {};
    #line 14 "assets/shaders.glsl"
        out.fragColor = tex_cube.sample(tex_cubeSmplr, float3(in.v_texcoord, 1.0));
        return out;
    }
    
*/
static const char display_fs_source_metal_macos[512] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,
    0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x20,0x66,0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x20,
    0x5b,0x5b,0x63,0x6f,0x6c,0x6f,0x72,0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,
    0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,
    0x6e,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x76,
    0x5f,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,
    0x28,0x6c,0x6f,0x63,0x6e,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x23,
    0x6c,0x69,0x6e,0x65,0x20,0x31,0x34,0x20,0x22,0x61,0x73,0x73,0x65,0x74,0x73,0x2f,
    0x73,0x68,0x61,0x64,0x65,0x72,0x73,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x66,0x72,
    0x61,0x67,0x6d,0x65,0x6e,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,
    0x20,0x6d,0x61,0x69,0x6e,0x30,0x28,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x20,
    0x69,0x6e,0x20,0x5b,0x5b,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x5d,0x5d,0x2c,
    0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x63,0x75,0x62,0x65,0x3c,0x66,0x6c,0x6f,
    0x61,0x74,0x3e,0x20,0x74,0x65,0x78,0x5f,0x63,0x75,0x62,0x65,0x20,0x5b,0x5b,0x74,
    0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x30,0x29,0x5d,0x5d,0x2c,0x20,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x72,0x20,0x74,0x65,0x78,0x5f,0x63,0x75,0x62,0x65,0x53,0x6d,0x70,
    0x6c,0x72,0x20,0x5b,0x5b,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x28,0x30,0x29,0x5d,
    0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,
    0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,0x20,0x7b,0x7d,0x3b,0x0a,0x23,0x6c,0x69,
    0x6e,0x65,0x20,0x31,0x34,0x20,0x22,0x61,0x73,0x73,0x65,0x74,0x73,0x2f,0x73,0x68,
    0x61,0x64,0x65,0x72,0x73,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,0x20,
    0x6f,0x75,0x74,0x2e,0x66,0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,
    0x74,0x65,0x78,0x5f,0x63,0x75,0x62,0x65,0x2e,0x73,0x61,0x6d,0x70,0x6c,0x65,0x28,
    0x74,0x65,0x78,0x5f,0x63,0x75,0x62,0x65,0x53,0x6d,0x70,0x6c,0x72,0x2c,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x33,0x28,0x69,0x6e,0x2e,0x76,0x5f,0x74,0x65,0x78,0x63,0x6f,
    0x6f,0x72,0x64,0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6f,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,

};
#if !defined(SOKOL_GFX_INCLUDED)
  #error "Please include sokol_gfx.h before shaders.glsl.h"
#endif
static inline const sg_shader_desc* pbr_display_shader_desc(sg_backend backend) {
  if (backend == SG_BACKEND_METAL_MACOS) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.vs.source = display_vs_source_metal_macos;
      desc.vs.entry = "main0";
      desc.fs.source = display_fs_source_metal_macos;
      desc.fs.entry = "main0";
      desc.fs.images[0].name = "tex_cube";
      desc.fs.images[0].image_type = SG_IMAGETYPE_CUBE;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "pbr_display_shader";
    }
    return &desc;
  }
  return 0;
}
static inline const sg_shader_desc* pbr_shader_shader_desc(sg_backend backend) {
  if (backend == SG_BACKEND_METAL_MACOS) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.vs.source = cubemap_vs_source_metal_macos;
      desc.vs.entry = "main0";
      desc.vs.uniform_blocks[0].size = 128;
      desc.vs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.fs.source = cubemap_fs_source_metal_macos;
      desc.fs.entry = "main0";
      desc.fs.images[0].name = "tex";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "pbr_shader_shader";
    }
    return &desc;
  }
  return 0;
}
