#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline: sokol-shdc --input assets/shaders.glsl --output src/shaders.glsl.h --slang glsl330

    Overview:

        Shader program 'pbr_brdf_lut':
            Get shader desc: pbr_brdf_lut_shader_desc(sg_query_backend());
            Vertex shader: brdf_lut_vs
                Attribute slots:
                    ATTR_brdf_lut_vs_position = 0
                    ATTR_brdf_lut_vs_texcoord = 1
            Fragment shader: brdf_lut_fs

        Shader program 'pbr_diffuse_irradiance':
            Get shader desc: pbr_diffuse_irradiance_shader_desc(sg_query_backend());
            Vertex shader: cubemap_vs
                Attribute slots:
                    ATTR_cubemap_vs_position = 0
                Uniform block 'cubemap_uniforms':
                    C struct: cubemap_uniforms_t
                    Bind slot: SLOT_cubemap_uniforms = 0
            Fragment shader: diffuse_irradiance_fs
                Image 'env_map':
                    Type: SG_IMAGETYPE_CUBE
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_env_map = 0

        Shader program 'pbr_display':
            Get shader desc: pbr_display_shader_desc(sg_query_backend());
            Vertex shader: display_vs
                Attribute slots:
                    ATTR_display_vs_position = 0
                    ATTR_display_vs_texcoord = 1
            Fragment shader: display_fs
                Image 'tex_cube':
                    Type: SG_IMAGETYPE_CUBE
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_tex_cube = 0

        Shader program 'pbr_prefilter':
            Get shader desc: pbr_prefilter_shader_desc(sg_query_backend());
            Vertex shader: prefilter_vs
                Attribute slots:
                    ATTR_prefilter_vs_position = 0
                Uniform block 'cubemap_uniforms':
                    C struct: cubemap_uniforms_t
                    Bind slot: SLOT_cubemap_uniforms = 0
            Fragment shader: prefilter_fs
                Uniform block 'prefilter_uniforms':
                    C struct: prefilter_uniforms_t
                    Bind slot: SLOT_prefilter_uniforms = 0
                Image 'tex_cube':
                    Type: SG_IMAGETYPE_CUBE
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_tex_cube = 0

        Shader program 'pbr_shader':
            Get shader desc: pbr_shader_shader_desc(sg_query_backend());
            Vertex shader: cubemap_vs
                Attribute slots:
                    ATTR_cubemap_vs_position = 0
                Uniform block 'cubemap_uniforms':
                    C struct: cubemap_uniforms_t
                    Bind slot: SLOT_cubemap_uniforms = 0
            Fragment shader: cubemap_fs
                Image 'tex':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_tex = 0


    Shader descriptor structs:

        sg_shader pbr_brdf_lut = sg_make_shader(pbr_brdf_lut_shader_desc(sg_query_backend()));
        sg_shader pbr_diffuse_irradiance = sg_make_shader(pbr_diffuse_irradiance_shader_desc(sg_query_backend()));
        sg_shader pbr_display = sg_make_shader(pbr_display_shader_desc(sg_query_backend()));
        sg_shader pbr_prefilter = sg_make_shader(pbr_prefilter_shader_desc(sg_query_backend()));
        sg_shader pbr_shader = sg_make_shader(pbr_shader_shader_desc(sg_query_backend()));

    Vertex attribute locations for vertex shader 'cubemap_vs':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_cubemap_vs_position] = { ... },
                },
            },
            ...});

    Vertex attribute locations for vertex shader 'prefilter_vs':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_prefilter_vs_position] = { ... },
                },
            },
            ...});

    Vertex attribute locations for vertex shader 'display_vs':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_display_vs_position] = { ... },
                    [ATTR_display_vs_texcoord] = { ... },
                },
            },
            ...});

    Vertex attribute locations for vertex shader 'brdf_lut_vs':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_brdf_lut_vs_position] = { ... },
                    [ATTR_brdf_lut_vs_texcoord] = { ... },
                },
            },
            ...});

    Image bind slots, use as index in sg_bindings.vs_images[] or .fs_images[]

        SLOT_tex = 0;
        SLOT_env_map = 0;
        SLOT_tex_cube = 0;

    Bind slot and C-struct for uniform block 'cubemap_uniforms':

        cubemap_uniforms_t cubemap_uniforms = {
            .projection = ...;
            .view = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_cubemap_uniforms, &SG_RANGE(cubemap_uniforms));

    Bind slot and C-struct for uniform block 'prefilter_uniforms':

        prefilter_uniforms_t prefilter_uniforms = {
            .roughness = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_prefilter_uniforms, &SG_RANGE(prefilter_uniforms));

*/
#include <stdint.h>
#include <stdbool.h>
#include <string.h>
#include <stddef.h>
#if !defined(SOKOL_SHDC_ALIGN)
  #if defined(_MSC_VER)
    #define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
  #else
    #define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
  #endif
#endif
#define ATTR_cubemap_vs_position (0)
#define ATTR_prefilter_vs_position (0)
#define ATTR_display_vs_position (0)
#define ATTR_display_vs_texcoord (1)
#define ATTR_brdf_lut_vs_position (0)
#define ATTR_brdf_lut_vs_texcoord (1)
#define SLOT_tex (0)
#define SLOT_env_map (0)
#define SLOT_tex_cube (0)
#define SLOT_cubemap_uniforms (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct cubemap_uniforms_t {
    float projection[16];
    float view[16];
} cubemap_uniforms_t;
#pragma pack(pop)
#define SLOT_prefilter_uniforms (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct prefilter_uniforms_t {
    float roughness;
    uint8_t _pad_4[12];
} prefilter_uniforms_t;
#pragma pack(pop)
/*
    #version 330
    
    uniform vec4 cubemap_uniforms[8];
    out vec3 localPos;
    layout(location = 0) in vec3 position;
    
    void main()
    {
        localPos = position;
        gl_Position = (mat4(cubemap_uniforms[0], cubemap_uniforms[1], cubemap_uniforms[2], cubemap_uniforms[3]) * mat4(cubemap_uniforms[4], cubemap_uniforms[5], cubemap_uniforms[6], cubemap_uniforms[7])) * vec4(position, 1.0);
    }
    
*/
static const char cubemap_vs_source_glsl330[373] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x63,0x75,0x62,0x65,0x6d,
    0x61,0x70,0x5f,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x73,0x5b,0x38,0x5d,0x3b,0x0a,
    0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x33,0x20,0x6c,0x6f,0x63,0x61,0x6c,0x50,0x6f,
    0x73,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,
    0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,
    0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,
    0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6c,0x6f,0x63,
    0x61,0x6c,0x50,0x6f,0x73,0x20,0x3d,0x20,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,
    0x6e,0x20,0x3d,0x20,0x28,0x6d,0x61,0x74,0x34,0x28,0x63,0x75,0x62,0x65,0x6d,0x61,
    0x70,0x5f,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x73,0x5b,0x30,0x5d,0x2c,0x20,0x63,
    0x75,0x62,0x65,0x6d,0x61,0x70,0x5f,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x73,0x5b,
    0x31,0x5d,0x2c,0x20,0x63,0x75,0x62,0x65,0x6d,0x61,0x70,0x5f,0x75,0x6e,0x69,0x66,
    0x6f,0x72,0x6d,0x73,0x5b,0x32,0x5d,0x2c,0x20,0x63,0x75,0x62,0x65,0x6d,0x61,0x70,
    0x5f,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x73,0x5b,0x33,0x5d,0x29,0x20,0x2a,0x20,
    0x6d,0x61,0x74,0x34,0x28,0x63,0x75,0x62,0x65,0x6d,0x61,0x70,0x5f,0x75,0x6e,0x69,
    0x66,0x6f,0x72,0x6d,0x73,0x5b,0x34,0x5d,0x2c,0x20,0x63,0x75,0x62,0x65,0x6d,0x61,
    0x70,0x5f,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x73,0x5b,0x35,0x5d,0x2c,0x20,0x63,
    0x75,0x62,0x65,0x6d,0x61,0x70,0x5f,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x73,0x5b,
    0x36,0x5d,0x2c,0x20,0x63,0x75,0x62,0x65,0x6d,0x61,0x70,0x5f,0x75,0x6e,0x69,0x66,
    0x6f,0x72,0x6d,0x73,0x5b,0x37,0x5d,0x29,0x29,0x20,0x2a,0x20,0x76,0x65,0x63,0x34,
    0x28,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,
    0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 330
    
    uniform sampler2D tex;
    
    in vec3 localPos;
    layout(location = 0) out vec4 fragColor;
    
    vec2 SampleSphericalMap(vec3 v)
    {
        return (vec2(atan(v.z, v.x), asin(v.y)) * vec2(0.159099996089935302734375, 0.3183000087738037109375)) + vec2(0.5);
    }
    
    void main()
    {
        vec3 param = normalize(localPos);
        fragColor = vec4(texture(tex, SampleSphericalMap(param)).xyz, 1.0);
    }
    
*/
static const char cubemap_fs_source_glsl330[382] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,
    0x74,0x65,0x78,0x3b,0x0a,0x0a,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x6c,0x6f,
    0x63,0x61,0x6c,0x50,0x6f,0x73,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,
    0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,
    0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x3b,
    0x0a,0x0a,0x76,0x65,0x63,0x32,0x20,0x53,0x61,0x6d,0x70,0x6c,0x65,0x53,0x70,0x68,
    0x65,0x72,0x69,0x63,0x61,0x6c,0x4d,0x61,0x70,0x28,0x76,0x65,0x63,0x33,0x20,0x76,
    0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x28,
    0x76,0x65,0x63,0x32,0x28,0x61,0x74,0x61,0x6e,0x28,0x76,0x2e,0x7a,0x2c,0x20,0x76,
    0x2e,0x78,0x29,0x2c,0x20,0x61,0x73,0x69,0x6e,0x28,0x76,0x2e,0x79,0x29,0x29,0x20,
    0x2a,0x20,0x76,0x65,0x63,0x32,0x28,0x30,0x2e,0x31,0x35,0x39,0x30,0x39,0x39,0x39,
    0x39,0x36,0x30,0x38,0x39,0x39,0x33,0x35,0x33,0x30,0x32,0x37,0x33,0x34,0x33,0x37,
    0x35,0x2c,0x20,0x30,0x2e,0x33,0x31,0x38,0x33,0x30,0x30,0x30,0x30,0x38,0x37,0x37,
    0x33,0x38,0x30,0x33,0x37,0x31,0x30,0x39,0x33,0x37,0x35,0x29,0x29,0x20,0x2b,0x20,
    0x76,0x65,0x63,0x32,0x28,0x30,0x2e,0x35,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x76,0x6f,
    0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x76,0x65,0x63,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x6e,0x6f,0x72,
    0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x6c,0x6f,0x63,0x61,0x6c,0x50,0x6f,0x73,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x20,
    0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x74,
    0x65,0x78,0x2c,0x20,0x53,0x61,0x6d,0x70,0x6c,0x65,0x53,0x70,0x68,0x65,0x72,0x69,
    0x63,0x61,0x6c,0x4d,0x61,0x70,0x28,0x70,0x61,0x72,0x61,0x6d,0x29,0x29,0x2e,0x78,
    0x79,0x7a,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 330
    
    uniform samplerCube env_map;
    
    in vec3 localPos;
    layout(location = 0) out vec4 fragColor;
    
    vec3 CalculateIrradiance()
    {
        vec3 _18 = normalize(localPos);
        vec3 irradiance = vec3(0.0);
        vec3 _29 = normalize(cross(vec3(0.0, 1.0, 0.0), _18));
        vec3 _33 = normalize(cross(_18, _29));
        float nrSamples = 0.0;
        for (float phi = 0.0; phi < 6.283185482025146484375; phi += 0.02500000037252902984619140625)
        {
            for (float theta = 0.0; theta < 1.57079637050628662109375; theta += 0.02500000037252902984619140625)
            {
                float _59 = sin(theta);
                float _69 = cos(theta);
                irradiance += ((texture(env_map, ((_29 * (_59 * cos(phi))) + (_33 * (_59 * sin(phi)))) + (_18 * _69)).xyz * _69) * _59);
                nrSamples += 1.0;
            }
        }
        vec3 _116 = irradiance;
        vec3 _120 = (_116 * 3.1415927410125732421875) * (1.0 / nrSamples);
        irradiance = _120;
        return _120;
    }
    
    void main()
    {
        fragColor = vec4(CalculateIrradiance(), 1.0);
    }
    
*/
static const char diffuse_irradiance_fs_source_glsl330[1014] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x43,0x75,0x62,
    0x65,0x20,0x65,0x6e,0x76,0x5f,0x6d,0x61,0x70,0x3b,0x0a,0x0a,0x69,0x6e,0x20,0x76,
    0x65,0x63,0x33,0x20,0x6c,0x6f,0x63,0x61,0x6c,0x50,0x6f,0x73,0x3b,0x0a,0x6c,0x61,
    0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,
    0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x72,0x61,0x67,
    0x43,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x76,0x65,0x63,0x33,0x20,0x43,0x61,0x6c,
    0x63,0x75,0x6c,0x61,0x74,0x65,0x49,0x72,0x72,0x61,0x64,0x69,0x61,0x6e,0x63,0x65,
    0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x31,
    0x38,0x20,0x3d,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x6c,0x6f,
    0x63,0x61,0x6c,0x50,0x6f,0x73,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,
    0x33,0x20,0x69,0x72,0x72,0x61,0x64,0x69,0x61,0x6e,0x63,0x65,0x20,0x3d,0x20,0x76,
    0x65,0x63,0x33,0x28,0x30,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,
    0x63,0x33,0x20,0x5f,0x32,0x39,0x20,0x3d,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,
    0x7a,0x65,0x28,0x63,0x72,0x6f,0x73,0x73,0x28,0x76,0x65,0x63,0x33,0x28,0x30,0x2e,
    0x30,0x2c,0x20,0x31,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x29,0x2c,0x20,0x5f,0x31,
    0x38,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x33,
    0x33,0x20,0x3d,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x63,0x72,
    0x6f,0x73,0x73,0x28,0x5f,0x31,0x38,0x2c,0x20,0x5f,0x32,0x39,0x29,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x6e,0x72,0x53,0x61,0x6d,0x70,
    0x6c,0x65,0x73,0x20,0x3d,0x20,0x30,0x2e,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6f,0x72,0x20,0x28,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x68,0x69,0x20,0x3d,0x20,
    0x30,0x2e,0x30,0x3b,0x20,0x70,0x68,0x69,0x20,0x3c,0x20,0x36,0x2e,0x32,0x38,0x33,
    0x31,0x38,0x35,0x34,0x38,0x32,0x30,0x32,0x35,0x31,0x34,0x36,0x34,0x38,0x34,0x33,
    0x37,0x35,0x3b,0x20,0x70,0x68,0x69,0x20,0x2b,0x3d,0x20,0x30,0x2e,0x30,0x32,0x35,
    0x30,0x30,0x30,0x30,0x30,0x30,0x33,0x37,0x32,0x35,0x32,0x39,0x30,0x32,0x39,0x38,
    0x34,0x36,0x31,0x39,0x31,0x34,0x30,0x36,0x32,0x35,0x29,0x0a,0x20,0x20,0x20,0x20,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6f,0x72,0x20,0x28,0x66,
    0x6c,0x6f,0x61,0x74,0x20,0x74,0x68,0x65,0x74,0x61,0x20,0x3d,0x20,0x30,0x2e,0x30,
    0x3b,0x20,0x74,0x68,0x65,0x74,0x61,0x20,0x3c,0x20,0x31,0x2e,0x35,0x37,0x30,0x37,
    0x39,0x36,0x33,0x37,0x30,0x35,0x30,0x36,0x32,0x38,0x36,0x36,0x32,0x31,0x30,0x39,
    0x33,0x37,0x35,0x3b,0x20,0x74,0x68,0x65,0x74,0x61,0x20,0x2b,0x3d,0x20,0x30,0x2e,
    0x30,0x32,0x35,0x30,0x30,0x30,0x30,0x30,0x30,0x33,0x37,0x32,0x35,0x32,0x39,0x30,
    0x32,0x39,0x38,0x34,0x36,0x31,0x39,0x31,0x34,0x30,0x36,0x32,0x35,0x29,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x35,0x39,0x20,0x3d,
    0x20,0x73,0x69,0x6e,0x28,0x74,0x68,0x65,0x74,0x61,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,
    0x36,0x39,0x20,0x3d,0x20,0x63,0x6f,0x73,0x28,0x74,0x68,0x65,0x74,0x61,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x72,0x72,
    0x61,0x64,0x69,0x61,0x6e,0x63,0x65,0x20,0x2b,0x3d,0x20,0x28,0x28,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x28,0x65,0x6e,0x76,0x5f,0x6d,0x61,0x70,0x2c,0x20,0x28,0x28,
    0x5f,0x32,0x39,0x20,0x2a,0x20,0x28,0x5f,0x35,0x39,0x20,0x2a,0x20,0x63,0x6f,0x73,
    0x28,0x70,0x68,0x69,0x29,0x29,0x29,0x20,0x2b,0x20,0x28,0x5f,0x33,0x33,0x20,0x2a,
    0x20,0x28,0x5f,0x35,0x39,0x20,0x2a,0x20,0x73,0x69,0x6e,0x28,0x70,0x68,0x69,0x29,
    0x29,0x29,0x29,0x20,0x2b,0x20,0x28,0x5f,0x31,0x38,0x20,0x2a,0x20,0x5f,0x36,0x39,
    0x29,0x29,0x2e,0x78,0x79,0x7a,0x20,0x2a,0x20,0x5f,0x36,0x39,0x29,0x20,0x2a,0x20,
    0x5f,0x35,0x39,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x6e,0x72,0x53,0x61,0x6d,0x70,0x6c,0x65,0x73,0x20,0x2b,0x3d,0x20,0x31,
    0x2e,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,
    0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x31,0x31,
    0x36,0x20,0x3d,0x20,0x69,0x72,0x72,0x61,0x64,0x69,0x61,0x6e,0x63,0x65,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x31,0x32,0x30,0x20,0x3d,0x20,
    0x28,0x5f,0x31,0x31,0x36,0x20,0x2a,0x20,0x33,0x2e,0x31,0x34,0x31,0x35,0x39,0x32,
    0x37,0x34,0x31,0x30,0x31,0x32,0x35,0x37,0x33,0x32,0x34,0x32,0x31,0x38,0x37,0x35,
    0x29,0x20,0x2a,0x20,0x28,0x31,0x2e,0x30,0x20,0x2f,0x20,0x6e,0x72,0x53,0x61,0x6d,
    0x70,0x6c,0x65,0x73,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x72,0x72,0x61,0x64,
    0x69,0x61,0x6e,0x63,0x65,0x20,0x3d,0x20,0x5f,0x31,0x32,0x30,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x5f,0x31,0x32,0x30,0x3b,0x0a,0x7d,
    0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,
    0x76,0x65,0x63,0x34,0x28,0x43,0x61,0x6c,0x63,0x75,0x6c,0x61,0x74,0x65,0x49,0x72,
    0x72,0x61,0x64,0x69,0x61,0x6e,0x63,0x65,0x28,0x29,0x2c,0x20,0x31,0x2e,0x30,0x29,
    0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 330
    
    uniform vec4 cubemap_uniforms[8];
    out vec3 v_localPos;
    layout(location = 0) in vec3 position;
    
    void main()
    {
        v_localPos = position;
        gl_Position = (mat4(cubemap_uniforms[0], cubemap_uniforms[1], cubemap_uniforms[2], cubemap_uniforms[3]) * mat4(cubemap_uniforms[4], cubemap_uniforms[5], cubemap_uniforms[6], cubemap_uniforms[7])) * vec4(position, 1.0);
    }
    
*/
static const char prefilter_vs_source_glsl330[377] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x63,0x75,0x62,0x65,0x6d,
    0x61,0x70,0x5f,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x73,0x5b,0x38,0x5d,0x3b,0x0a,
    0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x33,0x20,0x76,0x5f,0x6c,0x6f,0x63,0x61,0x6c,
    0x50,0x6f,0x73,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,
    0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,
    0x33,0x20,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x0a,0x76,0x6f,0x69,
    0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,
    0x5f,0x6c,0x6f,0x63,0x61,0x6c,0x50,0x6f,0x73,0x20,0x3d,0x20,0x70,0x6f,0x73,0x69,
    0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,
    0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x28,0x6d,0x61,0x74,0x34,0x28,0x63,0x75,
    0x62,0x65,0x6d,0x61,0x70,0x5f,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x73,0x5b,0x30,
    0x5d,0x2c,0x20,0x63,0x75,0x62,0x65,0x6d,0x61,0x70,0x5f,0x75,0x6e,0x69,0x66,0x6f,
    0x72,0x6d,0x73,0x5b,0x31,0x5d,0x2c,0x20,0x63,0x75,0x62,0x65,0x6d,0x61,0x70,0x5f,
    0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x73,0x5b,0x32,0x5d,0x2c,0x20,0x63,0x75,0x62,
    0x65,0x6d,0x61,0x70,0x5f,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x73,0x5b,0x33,0x5d,
    0x29,0x20,0x2a,0x20,0x6d,0x61,0x74,0x34,0x28,0x63,0x75,0x62,0x65,0x6d,0x61,0x70,
    0x5f,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x73,0x5b,0x34,0x5d,0x2c,0x20,0x63,0x75,
    0x62,0x65,0x6d,0x61,0x70,0x5f,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x73,0x5b,0x35,
    0x5d,0x2c,0x20,0x63,0x75,0x62,0x65,0x6d,0x61,0x70,0x5f,0x75,0x6e,0x69,0x66,0x6f,
    0x72,0x6d,0x73,0x5b,0x36,0x5d,0x2c,0x20,0x63,0x75,0x62,0x65,0x6d,0x61,0x70,0x5f,
    0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x73,0x5b,0x37,0x5d,0x29,0x29,0x20,0x2a,0x20,
    0x76,0x65,0x63,0x34,0x28,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x31,
    0x2e,0x30,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 330
    
    uniform vec4 prefilter_uniforms[1];
    uniform samplerCube tex_cube;
    
    in vec3 v_localPos;
    layout(location = 0) out vec4 fragColor;
    
    float RadicalInverse_VdC(inout uint bits)
    {
        bits = (bits << 16u) | (bits >> 16u);
        bits = ((bits & 1431655765u) << 1u) | ((bits & 2863311530u) >> 1u);
        bits = ((bits & 858993459u) << 2u) | ((bits & 3435973836u) >> 2u);
        bits = ((bits & 252645135u) << 4u) | ((bits & 4042322160u) >> 4u);
        bits = ((bits & 16711935u) << 8u) | ((bits & 4278255360u) >> 8u);
        return float(bits) * 2.3283064365386962890625e-10;
    }
    
    vec2 Hammersley(uint i, uint N)
    {
        uint param = i;
        float _133 = RadicalInverse_VdC(param);
        return vec2(float(i) / float(N), _133);
    }
    
    vec3 ImportanceSampleGGX(vec2 Xi, vec3 N, float roughness)
    {
        float _140 = roughness * roughness;
        float _146 = 6.283185482025146484375 * Xi.x;
        float _160 = sqrt((1.0 - Xi.y) / (1.0 + (((_140 * _140) - 1.0) * Xi.y)));
        float _166 = sqrt(1.0 - (_160 * _160));
        bvec3 _190 = bvec3(abs(N.z) < 0.999000012874603271484375);
        vec3 _196 = normalize(cross(vec3(_190.x ? vec3(0.0, 0.0, 1.0).x : vec3(1.0, 0.0, 0.0).x, _190.y ? vec3(0.0, 0.0, 1.0).y : vec3(1.0, 0.0, 0.0).y, _190.z ? vec3(0.0, 0.0, 1.0).z : vec3(1.0, 0.0, 0.0).z), N));
        return normalize(((_196 * (cos(_146) * _166)) + (cross(N, _196) * (sin(_146) * _166))) + (N * _160));
    }
    
    float DistributionGGX(vec3 N, vec3 H, float roughness)
    {
        float _40 = roughness * roughness;
        float _44 = _40 * _40;
        float _50 = max(dot(N, H), 0.0);
        float _63 = ((_50 * _50) * (_44 - 1.0)) + 1.0;
        return _44 / ((3.1415927410125732421875 * _63) * _63);
    }
    
    void main()
    {
        vec3 _224 = normalize(v_localPos);
        vec3 prefilteredColor = vec3(0.0);
        float totalWeight = 0.0;
        float _329;
        for (uint i = 0u; i < 1024u; i++)
        {
            uint param = i;
            uint param_1 = 1024u;
            vec2 param_2 = Hammersley(param, param_1);
            vec3 param_3 = _224;
            float param_4 = prefilter_uniforms[0].x;
            vec3 _260 = ImportanceSampleGGX(param_2, param_3, param_4);
            float _265 = dot(_224, _260);
            vec3 _271 = normalize((_260 * (2.0 * _265)) - _224);
            float _276 = max(dot(_224, _271), 0.0);
            if (_276 > 0.0)
            {
                vec3 param_5 = _224;
                vec3 param_6 = _260;
                float param_7 = prefilter_uniforms[0].x;
                if (prefilter_uniforms[0].x == 0.0)
                {
                    _329 = 0.0;
                }
                else
                {
                    _329 = 0.5 * log2(500658.15625 / ((1024.0 * (((DistributionGGX(param_5, param_6, param_7) * max(_265, 0.0)) / (4.0 * max(dot(_260, _224), 0.0))) + 9.9999997473787516355514526367188e-05)) + 9.9999997473787516355514526367188e-05));
                }
                prefilteredColor += (textureLod(tex_cube, _271, _329).xyz * _276);
                totalWeight += _276;
            }
        }
        vec3 _360 = prefilteredColor;
        vec3 _363 = _360 / vec3(totalWeight);
        prefilteredColor = _363;
        fragColor = vec4(_363, 1.0);
    }
    
*/
static const char prefilter_fs_source_glsl330[3041] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x70,0x72,0x65,0x66,0x69,
    0x6c,0x74,0x65,0x72,0x5f,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x73,0x5b,0x31,0x5d,
    0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,
    0x72,0x43,0x75,0x62,0x65,0x20,0x74,0x65,0x78,0x5f,0x63,0x75,0x62,0x65,0x3b,0x0a,
    0x0a,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x76,0x5f,0x6c,0x6f,0x63,0x61,0x6c,
    0x50,0x6f,0x73,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,
    0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,
    0x63,0x34,0x20,0x66,0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x66,
    0x6c,0x6f,0x61,0x74,0x20,0x52,0x61,0x64,0x69,0x63,0x61,0x6c,0x49,0x6e,0x76,0x65,
    0x72,0x73,0x65,0x5f,0x56,0x64,0x43,0x28,0x69,0x6e,0x6f,0x75,0x74,0x20,0x75,0x69,
    0x6e,0x74,0x20,0x62,0x69,0x74,0x73,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x62,
    0x69,0x74,0x73,0x20,0x3d,0x20,0x28,0x62,0x69,0x74,0x73,0x20,0x3c,0x3c,0x20,0x31,
    0x36,0x75,0x29,0x20,0x7c,0x20,0x28,0x62,0x69,0x74,0x73,0x20,0x3e,0x3e,0x20,0x31,
    0x36,0x75,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x62,0x69,0x74,0x73,0x20,0x3d,0x20,
    0x28,0x28,0x62,0x69,0x74,0x73,0x20,0x26,0x20,0x31,0x34,0x33,0x31,0x36,0x35,0x35,
    0x37,0x36,0x35,0x75,0x29,0x20,0x3c,0x3c,0x20,0x31,0x75,0x29,0x20,0x7c,0x20,0x28,
    0x28,0x62,0x69,0x74,0x73,0x20,0x26,0x20,0x32,0x38,0x36,0x33,0x33,0x31,0x31,0x35,
    0x33,0x30,0x75,0x29,0x20,0x3e,0x3e,0x20,0x31,0x75,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x62,0x69,0x74,0x73,0x20,0x3d,0x20,0x28,0x28,0x62,0x69,0x74,0x73,0x20,0x26,
    0x20,0x38,0x35,0x38,0x39,0x39,0x33,0x34,0x35,0x39,0x75,0x29,0x20,0x3c,0x3c,0x20,
    0x32,0x75,0x29,0x20,0x7c,0x20,0x28,0x28,0x62,0x69,0x74,0x73,0x20,0x26,0x20,0x33,
    0x34,0x33,0x35,0x39,0x37,0x33,0x38,0x33,0x36,0x75,0x29,0x20,0x3e,0x3e,0x20,0x32,
    0x75,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x62,0x69,0x74,0x73,0x20,0x3d,0x20,0x28,
    0x28,0x62,0x69,0x74,0x73,0x20,0x26,0x20,0x32,0x35,0x32,0x36,0x34,0x35,0x31,0x33,
    0x35,0x75,0x29,0x20,0x3c,0x3c,0x20,0x34,0x75,0x29,0x20,0x7c,0x20,0x28,0x28,0x62,
    0x69,0x74,0x73,0x20,0x26,0x20,0x34,0x30,0x34,0x32,0x33,0x32,0x32,0x31,0x36,0x30,
    0x75,0x29,0x20,0x3e,0x3e,0x20,0x34,0x75,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x62,
    0x69,0x74,0x73,0x20,0x3d,0x20,0x28,0x28,0x62,0x69,0x74,0x73,0x20,0x26,0x20,0x31,
    0x36,0x37,0x31,0x31,0x39,0x33,0x35,0x75,0x29,0x20,0x3c,0x3c,0x20,0x38,0x75,0x29,
    0x20,0x7c,0x20,0x28,0x28,0x62,0x69,0x74,0x73,0x20,0x26,0x20,0x34,0x32,0x37,0x38,
    0x32,0x35,0x35,0x33,0x36,0x30,0x75,0x29,0x20,0x3e,0x3e,0x20,0x38,0x75,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x28,0x62,0x69,0x74,0x73,0x29,0x20,0x2a,0x20,0x32,0x2e,0x33,0x32,0x38,0x33,
    0x30,0x36,0x34,0x33,0x36,0x35,0x33,0x38,0x36,0x39,0x36,0x32,0x38,0x39,0x30,0x36,
    0x32,0x35,0x65,0x2d,0x31,0x30,0x3b,0x0a,0x7d,0x0a,0x0a,0x76,0x65,0x63,0x32,0x20,
    0x48,0x61,0x6d,0x6d,0x65,0x72,0x73,0x6c,0x65,0x79,0x28,0x75,0x69,0x6e,0x74,0x20,
    0x69,0x2c,0x20,0x75,0x69,0x6e,0x74,0x20,0x4e,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x75,0x69,0x6e,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x69,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x33,0x33,0x20,
    0x3d,0x20,0x52,0x61,0x64,0x69,0x63,0x61,0x6c,0x49,0x6e,0x76,0x65,0x72,0x73,0x65,
    0x5f,0x56,0x64,0x43,0x28,0x70,0x61,0x72,0x61,0x6d,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x76,0x65,0x63,0x32,0x28,0x66,0x6c,0x6f,
    0x61,0x74,0x28,0x69,0x29,0x20,0x2f,0x20,0x66,0x6c,0x6f,0x61,0x74,0x28,0x4e,0x29,
    0x2c,0x20,0x5f,0x31,0x33,0x33,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x76,0x65,0x63,0x33,
    0x20,0x49,0x6d,0x70,0x6f,0x72,0x74,0x61,0x6e,0x63,0x65,0x53,0x61,0x6d,0x70,0x6c,
    0x65,0x47,0x47,0x58,0x28,0x76,0x65,0x63,0x32,0x20,0x58,0x69,0x2c,0x20,0x76,0x65,
    0x63,0x33,0x20,0x4e,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x72,0x6f,0x75,0x67,
    0x68,0x6e,0x65,0x73,0x73,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x20,0x5f,0x31,0x34,0x30,0x20,0x3d,0x20,0x72,0x6f,0x75,0x67,0x68,0x6e,
    0x65,0x73,0x73,0x20,0x2a,0x20,0x72,0x6f,0x75,0x67,0x68,0x6e,0x65,0x73,0x73,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x34,0x36,0x20,
    0x3d,0x20,0x36,0x2e,0x32,0x38,0x33,0x31,0x38,0x35,0x34,0x38,0x32,0x30,0x32,0x35,
    0x31,0x34,0x36,0x34,0x38,0x34,0x33,0x37,0x35,0x20,0x2a,0x20,0x58,0x69,0x2e,0x78,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x36,0x30,
    0x20,0x3d,0x20,0x73,0x71,0x72,0x74,0x28,0x28,0x31,0x2e,0x30,0x20,0x2d,0x20,0x58,
    0x69,0x2e,0x79,0x29,0x20,0x2f,0x20,0x28,0x31,0x2e,0x30,0x20,0x2b,0x20,0x28,0x28,
    0x28,0x5f,0x31,0x34,0x30,0x20,0x2a,0x20,0x5f,0x31,0x34,0x30,0x29,0x20,0x2d,0x20,
    0x31,0x2e,0x30,0x29,0x20,0x2a,0x20,0x58,0x69,0x2e,0x79,0x29,0x29,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x36,0x36,0x20,0x3d,
    0x20,0x73,0x71,0x72,0x74,0x28,0x31,0x2e,0x30,0x20,0x2d,0x20,0x28,0x5f,0x31,0x36,
    0x30,0x20,0x2a,0x20,0x5f,0x31,0x36,0x30,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x62,0x76,0x65,0x63,0x33,0x20,0x5f,0x31,0x39,0x30,0x20,0x3d,0x20,0x62,0x76,0x65,
    0x63,0x33,0x28,0x61,0x62,0x73,0x28,0x4e,0x2e,0x7a,0x29,0x20,0x3c,0x20,0x30,0x2e,
    0x39,0x39,0x39,0x30,0x30,0x30,0x30,0x31,0x32,0x38,0x37,0x34,0x36,0x30,0x33,0x32,
    0x37,0x31,0x34,0x38,0x34,0x33,0x37,0x35,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,
    0x65,0x63,0x33,0x20,0x5f,0x31,0x39,0x36,0x20,0x3d,0x20,0x6e,0x6f,0x72,0x6d,0x61,
    0x6c,0x69,0x7a,0x65,0x28,0x63,0x72,0x6f,0x73,0x73,0x28,0x76,0x65,0x63,0x33,0x28,
    0x5f,0x31,0x39,0x30,0x2e,0x78,0x20,0x3f,0x20,0x76,0x65,0x63,0x33,0x28,0x30,0x2e,
    0x30,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x2e,0x78,0x20,0x3a,
    0x20,0x76,0x65,0x63,0x33,0x28,0x31,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,
    0x30,0x2e,0x30,0x29,0x2e,0x78,0x2c,0x20,0x5f,0x31,0x39,0x30,0x2e,0x79,0x20,0x3f,
    0x20,0x76,0x65,0x63,0x33,0x28,0x30,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,
    0x31,0x2e,0x30,0x29,0x2e,0x79,0x20,0x3a,0x20,0x76,0x65,0x63,0x33,0x28,0x31,0x2e,
    0x30,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x29,0x2e,0x79,0x2c,0x20,
    0x5f,0x31,0x39,0x30,0x2e,0x7a,0x20,0x3f,0x20,0x76,0x65,0x63,0x33,0x28,0x30,0x2e,
    0x30,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x2e,0x7a,0x20,0x3a,
    0x20,0x76,0x65,0x63,0x33,0x28,0x31,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,
    0x30,0x2e,0x30,0x29,0x2e,0x7a,0x29,0x2c,0x20,0x4e,0x29,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,
    0x7a,0x65,0x28,0x28,0x28,0x5f,0x31,0x39,0x36,0x20,0x2a,0x20,0x28,0x63,0x6f,0x73,
    0x28,0x5f,0x31,0x34,0x36,0x29,0x20,0x2a,0x20,0x5f,0x31,0x36,0x36,0x29,0x29,0x20,
    0x2b,0x20,0x28,0x63,0x72,0x6f,0x73,0x73,0x28,0x4e,0x2c,0x20,0x5f,0x31,0x39,0x36,
    0x29,0x20,0x2a,0x20,0x28,0x73,0x69,0x6e,0x28,0x5f,0x31,0x34,0x36,0x29,0x20,0x2a,
    0x20,0x5f,0x31,0x36,0x36,0x29,0x29,0x29,0x20,0x2b,0x20,0x28,0x4e,0x20,0x2a,0x20,
    0x5f,0x31,0x36,0x30,0x29,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x66,0x6c,0x6f,0x61,0x74,
    0x20,0x44,0x69,0x73,0x74,0x72,0x69,0x62,0x75,0x74,0x69,0x6f,0x6e,0x47,0x47,0x58,
    0x28,0x76,0x65,0x63,0x33,0x20,0x4e,0x2c,0x20,0x76,0x65,0x63,0x33,0x20,0x48,0x2c,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x72,0x6f,0x75,0x67,0x68,0x6e,0x65,0x73,0x73,
    0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x34,
    0x30,0x20,0x3d,0x20,0x72,0x6f,0x75,0x67,0x68,0x6e,0x65,0x73,0x73,0x20,0x2a,0x20,
    0x72,0x6f,0x75,0x67,0x68,0x6e,0x65,0x73,0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x20,0x5f,0x34,0x34,0x20,0x3d,0x20,0x5f,0x34,0x30,0x20,0x2a,
    0x20,0x5f,0x34,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,
    0x5f,0x35,0x30,0x20,0x3d,0x20,0x6d,0x61,0x78,0x28,0x64,0x6f,0x74,0x28,0x4e,0x2c,
    0x20,0x48,0x29,0x2c,0x20,0x30,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x20,0x5f,0x36,0x33,0x20,0x3d,0x20,0x28,0x28,0x5f,0x35,0x30,
    0x20,0x2a,0x20,0x5f,0x35,0x30,0x29,0x20,0x2a,0x20,0x28,0x5f,0x34,0x34,0x20,0x2d,
    0x20,0x31,0x2e,0x30,0x29,0x29,0x20,0x2b,0x20,0x31,0x2e,0x30,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x5f,0x34,0x34,0x20,0x2f,0x20,0x28,
    0x28,0x33,0x2e,0x31,0x34,0x31,0x35,0x39,0x32,0x37,0x34,0x31,0x30,0x31,0x32,0x35,
    0x37,0x33,0x32,0x34,0x32,0x31,0x38,0x37,0x35,0x20,0x2a,0x20,0x5f,0x36,0x33,0x29,
    0x20,0x2a,0x20,0x5f,0x36,0x33,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x76,0x6f,0x69,0x64,
    0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,
    0x63,0x33,0x20,0x5f,0x32,0x32,0x34,0x20,0x3d,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,
    0x69,0x7a,0x65,0x28,0x76,0x5f,0x6c,0x6f,0x63,0x61,0x6c,0x50,0x6f,0x73,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x72,0x65,0x66,0x69,0x6c,
    0x74,0x65,0x72,0x65,0x64,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,0x63,
    0x33,0x28,0x30,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x20,0x74,0x6f,0x74,0x61,0x6c,0x57,0x65,0x69,0x67,0x68,0x74,0x20,0x3d,0x20,
    0x30,0x2e,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,
    0x33,0x32,0x39,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6f,0x72,0x20,0x28,0x75,0x69,
    0x6e,0x74,0x20,0x69,0x20,0x3d,0x20,0x30,0x75,0x3b,0x20,0x69,0x20,0x3c,0x20,0x31,
    0x30,0x32,0x34,0x75,0x3b,0x20,0x69,0x2b,0x2b,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x20,0x70,0x61,
    0x72,0x61,0x6d,0x20,0x3d,0x20,0x69,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x75,0x69,0x6e,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x20,0x3d,0x20,
    0x31,0x30,0x32,0x34,0x75,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x76,
    0x65,0x63,0x32,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x20,0x3d,0x20,0x48,0x61,
    0x6d,0x6d,0x65,0x72,0x73,0x6c,0x65,0x79,0x28,0x70,0x61,0x72,0x61,0x6d,0x2c,0x20,
    0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x33,0x20,0x3d,
    0x20,0x5f,0x32,0x32,0x34,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x34,0x20,0x3d,0x20,0x70,
    0x72,0x65,0x66,0x69,0x6c,0x74,0x65,0x72,0x5f,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,
    0x73,0x5b,0x30,0x5d,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x76,0x65,0x63,0x33,0x20,0x5f,0x32,0x36,0x30,0x20,0x3d,0x20,0x49,0x6d,0x70,0x6f,
    0x72,0x74,0x61,0x6e,0x63,0x65,0x53,0x61,0x6d,0x70,0x6c,0x65,0x47,0x47,0x58,0x28,
    0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x33,
    0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x34,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x32,0x36,0x35,0x20,0x3d,
    0x20,0x64,0x6f,0x74,0x28,0x5f,0x32,0x32,0x34,0x2c,0x20,0x5f,0x32,0x36,0x30,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,
    0x32,0x37,0x31,0x20,0x3d,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,
    0x28,0x5f,0x32,0x36,0x30,0x20,0x2a,0x20,0x28,0x32,0x2e,0x30,0x20,0x2a,0x20,0x5f,
    0x32,0x36,0x35,0x29,0x29,0x20,0x2d,0x20,0x5f,0x32,0x32,0x34,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x32,0x37,
    0x36,0x20,0x3d,0x20,0x6d,0x61,0x78,0x28,0x64,0x6f,0x74,0x28,0x5f,0x32,0x32,0x34,
    0x2c,0x20,0x5f,0x32,0x37,0x31,0x29,0x2c,0x20,0x30,0x2e,0x30,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x32,0x37,0x36,0x20,
    0x3e,0x20,0x30,0x2e,0x30,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x76,0x65,0x63,
    0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x35,0x20,0x3d,0x20,0x5f,0x32,0x32,0x34,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x76,0x65,
    0x63,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x36,0x20,0x3d,0x20,0x5f,0x32,0x36,
    0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x37,0x20,0x3d,0x20,0x70,
    0x72,0x65,0x66,0x69,0x6c,0x74,0x65,0x72,0x5f,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,
    0x73,0x5b,0x30,0x5d,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x70,0x72,0x65,0x66,0x69,0x6c,0x74,0x65,
    0x72,0x5f,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x73,0x5b,0x30,0x5d,0x2e,0x78,0x20,
    0x3d,0x3d,0x20,0x30,0x2e,0x30,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x33,0x32,0x39,0x20,0x3d,0x20,0x30,0x2e,0x30,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,
    0x33,0x32,0x39,0x20,0x3d,0x20,0x30,0x2e,0x35,0x20,0x2a,0x20,0x6c,0x6f,0x67,0x32,
    0x28,0x35,0x30,0x30,0x36,0x35,0x38,0x2e,0x31,0x35,0x36,0x32,0x35,0x20,0x2f,0x20,
    0x28,0x28,0x31,0x30,0x32,0x34,0x2e,0x30,0x20,0x2a,0x20,0x28,0x28,0x28,0x44,0x69,
    0x73,0x74,0x72,0x69,0x62,0x75,0x74,0x69,0x6f,0x6e,0x47,0x47,0x58,0x28,0x70,0x61,
    0x72,0x61,0x6d,0x5f,0x35,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x36,0x2c,0x20,
    0x70,0x61,0x72,0x61,0x6d,0x5f,0x37,0x29,0x20,0x2a,0x20,0x6d,0x61,0x78,0x28,0x5f,
    0x32,0x36,0x35,0x2c,0x20,0x30,0x2e,0x30,0x29,0x29,0x20,0x2f,0x20,0x28,0x34,0x2e,
    0x30,0x20,0x2a,0x20,0x6d,0x61,0x78,0x28,0x64,0x6f,0x74,0x28,0x5f,0x32,0x36,0x30,
    0x2c,0x20,0x5f,0x32,0x32,0x34,0x29,0x2c,0x20,0x30,0x2e,0x30,0x29,0x29,0x29,0x20,
    0x2b,0x20,0x39,0x2e,0x39,0x39,0x39,0x39,0x39,0x39,0x37,0x34,0x37,0x33,0x37,0x38,
    0x37,0x35,0x31,0x36,0x33,0x35,0x35,0x35,0x31,0x34,0x35,0x32,0x36,0x33,0x36,0x37,
    0x31,0x38,0x38,0x65,0x2d,0x30,0x35,0x29,0x29,0x20,0x2b,0x20,0x39,0x2e,0x39,0x39,
    0x39,0x39,0x39,0x39,0x37,0x34,0x37,0x33,0x37,0x38,0x37,0x35,0x31,0x36,0x33,0x35,
    0x35,0x35,0x31,0x34,0x35,0x32,0x36,0x33,0x36,0x37,0x31,0x38,0x38,0x65,0x2d,0x30,
    0x35,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x70,
    0x72,0x65,0x66,0x69,0x6c,0x74,0x65,0x72,0x65,0x64,0x43,0x6f,0x6c,0x6f,0x72,0x20,
    0x2b,0x3d,0x20,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x4c,0x6f,0x64,0x28,0x74,
    0x65,0x78,0x5f,0x63,0x75,0x62,0x65,0x2c,0x20,0x5f,0x32,0x37,0x31,0x2c,0x20,0x5f,
    0x33,0x32,0x39,0x29,0x2e,0x78,0x79,0x7a,0x20,0x2a,0x20,0x5f,0x32,0x37,0x36,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x74,0x6f,
    0x74,0x61,0x6c,0x57,0x65,0x69,0x67,0x68,0x74,0x20,0x2b,0x3d,0x20,0x5f,0x32,0x37,
    0x36,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,
    0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x33,0x36,0x30,
    0x20,0x3d,0x20,0x70,0x72,0x65,0x66,0x69,0x6c,0x74,0x65,0x72,0x65,0x64,0x43,0x6f,
    0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x33,
    0x36,0x33,0x20,0x3d,0x20,0x5f,0x33,0x36,0x30,0x20,0x2f,0x20,0x76,0x65,0x63,0x33,
    0x28,0x74,0x6f,0x74,0x61,0x6c,0x57,0x65,0x69,0x67,0x68,0x74,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x70,0x72,0x65,0x66,0x69,0x6c,0x74,0x65,0x72,0x65,0x64,0x43,0x6f,
    0x6c,0x6f,0x72,0x20,0x3d,0x20,0x5f,0x33,0x36,0x33,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,
    0x28,0x5f,0x33,0x36,0x33,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,
    0x00,
};
/*
    #version 330
    
    layout(location = 0) in vec2 position;
    out vec2 v_texcoord;
    layout(location = 1) in vec2 texcoord;
    
    void main()
    {
        gl_Position = vec4(position, 0.0, 1.0);
        v_texcoord = texcoord;
    }
    
*/
static const char display_vs_source_glsl330[203] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x6c,0x61,
    0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,
    0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x70,0x6f,0x73,0x69,0x74,
    0x69,0x6f,0x6e,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x32,0x20,0x76,0x5f,
    0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,
    0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,0x29,0x20,0x69,
    0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x3b,
    0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,
    0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2c,
    0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x76,0x5f,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x20,0x3d,0x20,0x74,0x65,0x78,
    0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 330
    
    uniform samplerCube tex_cube;
    
    in vec2 v_texcoord;
    layout(location = 0) out vec4 fragColor;
    
    void main()
    {
        vec2 _51 = vec2(0.16666667163372039794921875, 0.25) - vec2(v_texcoord.x * 0.3333333432674407958984375, v_texcoord.y * 0.5);
        fragColor = texture(tex_cube, vec4(_51.x * 3.0, _51.y * 2.0, 1.0, 0.0).xyz);
    }
    
*/
static const char display_fs_source_glsl330[334] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x43,0x75,0x62,
    0x65,0x20,0x74,0x65,0x78,0x5f,0x63,0x75,0x62,0x65,0x3b,0x0a,0x0a,0x69,0x6e,0x20,
    0x76,0x65,0x63,0x32,0x20,0x76,0x5f,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x3b,
    0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x66,
    0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,
    0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,
    0x32,0x20,0x5f,0x35,0x31,0x20,0x3d,0x20,0x76,0x65,0x63,0x32,0x28,0x30,0x2e,0x31,
    0x36,0x36,0x36,0x36,0x36,0x36,0x37,0x31,0x36,0x33,0x33,0x37,0x32,0x30,0x33,0x39,
    0x37,0x39,0x34,0x39,0x32,0x31,0x38,0x37,0x35,0x2c,0x20,0x30,0x2e,0x32,0x35,0x29,
    0x20,0x2d,0x20,0x76,0x65,0x63,0x32,0x28,0x76,0x5f,0x74,0x65,0x78,0x63,0x6f,0x6f,
    0x72,0x64,0x2e,0x78,0x20,0x2a,0x20,0x30,0x2e,0x33,0x33,0x33,0x33,0x33,0x33,0x33,
    0x34,0x33,0x32,0x36,0x37,0x34,0x34,0x30,0x37,0x39,0x35,0x38,0x39,0x38,0x34,0x33,
    0x37,0x35,0x2c,0x20,0x76,0x5f,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x2e,0x79,
    0x20,0x2a,0x20,0x30,0x2e,0x35,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,
    0x67,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,
    0x28,0x74,0x65,0x78,0x5f,0x63,0x75,0x62,0x65,0x2c,0x20,0x76,0x65,0x63,0x34,0x28,
    0x5f,0x35,0x31,0x2e,0x78,0x20,0x2a,0x20,0x33,0x2e,0x30,0x2c,0x20,0x5f,0x35,0x31,
    0x2e,0x79,0x20,0x2a,0x20,0x32,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x2c,0x20,0x30,
    0x2e,0x30,0x29,0x2e,0x78,0x79,0x7a,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 330
    
    layout(location = 0) in vec2 position;
    out vec2 v_texcoord;
    layout(location = 1) in vec2 texcoord;
    
    void main()
    {
        gl_Position = vec4(position, 0.0, 1.0);
        v_texcoord = texcoord;
    }
    
*/
static const char brdf_lut_vs_source_glsl330[203] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x6c,0x61,
    0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,
    0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x70,0x6f,0x73,0x69,0x74,
    0x69,0x6f,0x6e,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x32,0x20,0x76,0x5f,
    0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,
    0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,0x29,0x20,0x69,
    0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x3b,
    0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,
    0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2c,
    0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x76,0x5f,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x20,0x3d,0x20,0x74,0x65,0x78,
    0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 330
    
    in vec2 v_texcoord;
    layout(location = 0) out vec4 fragColor;
    
    float RadicalInverse_VdC(inout uint bits)
    {
        bits = (bits << 16u) | (bits >> 16u);
        bits = ((bits & 1431655765u) << 1u) | ((bits & 2863311530u) >> 1u);
        bits = ((bits & 858993459u) << 2u) | ((bits & 3435973836u) >> 2u);
        bits = ((bits & 252645135u) << 4u) | ((bits & 4042322160u) >> 4u);
        bits = ((bits & 16711935u) << 8u) | ((bits & 4278255360u) >> 8u);
        return float(bits) * 2.3283064365386962890625e-10;
    }
    
    vec2 Hammersley(uint i, uint N)
    {
        uint param = i;
        float _107 = RadicalInverse_VdC(param);
        return vec2(float(i) / float(N), _107);
    }
    
    vec3 ImportanceSampleGGX(vec2 Xi, vec3 N, float roughness)
    {
        float _114 = roughness * roughness;
        float _120 = 6.283185482025146484375 * Xi.x;
        float _135 = sqrt((1.0 - Xi.y) / (1.0 + (((_114 * _114) - 1.0) * Xi.y)));
        float _141 = sqrt(1.0 - (_135 * _135));
        bvec3 _166 = bvec3(abs(N.z) < 0.999000012874603271484375);
        vec3 _172 = normalize(cross(vec3(_166.x ? vec3(0.0, 0.0, 1.0).x : vec3(1.0, 0.0, 0.0).x, _166.y ? vec3(0.0, 0.0, 1.0).y : vec3(1.0, 0.0, 0.0).y, _166.z ? vec3(0.0, 0.0, 1.0).z : vec3(1.0, 0.0, 0.0).z), N));
        return normalize(((_172 * (cos(_120) * _141)) + (cross(N, _172) * (sin(_120) * _141))) + (N * _135));
    }
    
    float GeometrySchlickGGX(float NdotV, float roughness)
    {
        float _203 = (roughness * roughness) * 0.5;
        return NdotV / ((NdotV * (1.0 - _203)) + _203);
    }
    
    float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)
    {
        float param = max(dot(N, V), 0.0);
        float param_1 = roughness;
        float param_2 = max(dot(N, L), 0.0);
        float param_3 = roughness;
        return GeometrySchlickGGX(param_2, param_3) * GeometrySchlickGGX(param, param_1);
    }
    
    vec2 IntegrateBRDF(float NdotV, float roughness)
    {
        vec3 _385 = vec3(0.0);
        _385.x = sqrt(1.0 - (NdotV * NdotV));
        vec3 _387 = _385;
        _387.y = 0.0;
        vec3 _389 = _387;
        _389.z = NdotV;
        float A = 0.0;
        float B = 0.0;
        for (uint i = 0u; i < 1024u; i++)
        {
            uint param = i;
            uint param_1 = 1024u;
            vec2 param_2 = Hammersley(param, param_1);
            vec3 param_3 = vec3(0.0, 0.0, 1.0);
            float param_4 = roughness;
            vec3 _280 = ImportanceSampleGGX(param_2, param_3, param_4);
            float _284 = dot(_389, _280);
            vec3 _290 = normalize((_280 * (2.0 * _284)) - _389);
            float _303 = max(_284, 0.0);
            if (max(_290.z, 0.0) > 0.0)
            {
                vec3 param_5 = vec3(0.0, 0.0, 1.0);
                vec3 param_6 = _389;
                vec3 param_7 = _290;
                float param_8 = roughness;
                float _325 = (GeometrySmith(param_5, param_6, param_7, param_8) * _303) / (max(_280.z, 0.0) * NdotV);
                float _330 = pow(1.0 - _303, 5.0);
                A += ((1.0 - _330) * _325);
                B += (_330 * _325);
            }
        }
        float _347 = A;
        float _348 = _347 * 0.0009765625;
        A = _348;
        float _349 = B;
        float _350 = _349 * 0.0009765625;
        B = _350;
        return vec2(_348, _350);
    }
    
    void main()
    {
        float param = v_texcoord.x;
        float param_1 = v_texcoord.y;
        fragColor = vec4(IntegrateBRDF(param, param_1), 0.0, 1.0);
    }
    
*/
static const char brdf_lut_fs_source_glsl330[3201] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x69,0x6e,
    0x20,0x76,0x65,0x63,0x32,0x20,0x76,0x5f,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,
    0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,
    0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,
    0x66,0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x66,0x6c,0x6f,0x61,
    0x74,0x20,0x52,0x61,0x64,0x69,0x63,0x61,0x6c,0x49,0x6e,0x76,0x65,0x72,0x73,0x65,
    0x5f,0x56,0x64,0x43,0x28,0x69,0x6e,0x6f,0x75,0x74,0x20,0x75,0x69,0x6e,0x74,0x20,
    0x62,0x69,0x74,0x73,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x62,0x69,0x74,0x73,
    0x20,0x3d,0x20,0x28,0x62,0x69,0x74,0x73,0x20,0x3c,0x3c,0x20,0x31,0x36,0x75,0x29,
    0x20,0x7c,0x20,0x28,0x62,0x69,0x74,0x73,0x20,0x3e,0x3e,0x20,0x31,0x36,0x75,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x62,0x69,0x74,0x73,0x20,0x3d,0x20,0x28,0x28,0x62,
    0x69,0x74,0x73,0x20,0x26,0x20,0x31,0x34,0x33,0x31,0x36,0x35,0x35,0x37,0x36,0x35,
    0x75,0x29,0x20,0x3c,0x3c,0x20,0x31,0x75,0x29,0x20,0x7c,0x20,0x28,0x28,0x62,0x69,
    0x74,0x73,0x20,0x26,0x20,0x32,0x38,0x36,0x33,0x33,0x31,0x31,0x35,0x33,0x30,0x75,
    0x29,0x20,0x3e,0x3e,0x20,0x31,0x75,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x62,0x69,
    0x74,0x73,0x20,0x3d,0x20,0x28,0x28,0x62,0x69,0x74,0x73,0x20,0x26,0x20,0x38,0x35,
    0x38,0x39,0x39,0x33,0x34,0x35,0x39,0x75,0x29,0x20,0x3c,0x3c,0x20,0x32,0x75,0x29,
    0x20,0x7c,0x20,0x28,0x28,0x62,0x69,0x74,0x73,0x20,0x26,0x20,0x33,0x34,0x33,0x35,
    0x39,0x37,0x33,0x38,0x33,0x36,0x75,0x29,0x20,0x3e,0x3e,0x20,0x32,0x75,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x62,0x69,0x74,0x73,0x20,0x3d,0x20,0x28,0x28,0x62,0x69,
    0x74,0x73,0x20,0x26,0x20,0x32,0x35,0x32,0x36,0x34,0x35,0x31,0x33,0x35,0x75,0x29,
    0x20,0x3c,0x3c,0x20,0x34,0x75,0x29,0x20,0x7c,0x20,0x28,0x28,0x62,0x69,0x74,0x73,
    0x20,0x26,0x20,0x34,0x30,0x34,0x32,0x33,0x32,0x32,0x31,0x36,0x30,0x75,0x29,0x20,
    0x3e,0x3e,0x20,0x34,0x75,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x62,0x69,0x74,0x73,
    0x20,0x3d,0x20,0x28,0x28,0x62,0x69,0x74,0x73,0x20,0x26,0x20,0x31,0x36,0x37,0x31,
    0x31,0x39,0x33,0x35,0x75,0x29,0x20,0x3c,0x3c,0x20,0x38,0x75,0x29,0x20,0x7c,0x20,
    0x28,0x28,0x62,0x69,0x74,0x73,0x20,0x26,0x20,0x34,0x32,0x37,0x38,0x32,0x35,0x35,
    0x33,0x36,0x30,0x75,0x29,0x20,0x3e,0x3e,0x20,0x38,0x75,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x66,0x6c,0x6f,0x61,0x74,0x28,0x62,
    0x69,0x74,0x73,0x29,0x20,0x2a,0x20,0x32,0x2e,0x33,0x32,0x38,0x33,0x30,0x36,0x34,
    0x33,0x36,0x35,0x33,0x38,0x36,0x39,0x36,0x32,0x38,0x39,0x30,0x36,0x32,0x35,0x65,
    0x2d,0x31,0x30,0x3b,0x0a,0x7d,0x0a,0x0a,0x76,0x65,0x63,0x32,0x20,0x48,0x61,0x6d,
    0x6d,0x65,0x72,0x73,0x6c,0x65,0x79,0x28,0x75,0x69,0x6e,0x74,0x20,0x69,0x2c,0x20,
    0x75,0x69,0x6e,0x74,0x20,0x4e,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x75,0x69,
    0x6e,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x69,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x30,0x37,0x20,0x3d,0x20,0x52,
    0x61,0x64,0x69,0x63,0x61,0x6c,0x49,0x6e,0x76,0x65,0x72,0x73,0x65,0x5f,0x56,0x64,
    0x43,0x28,0x70,0x61,0x72,0x61,0x6d,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,
    0x74,0x75,0x72,0x6e,0x20,0x76,0x65,0x63,0x32,0x28,0x66,0x6c,0x6f,0x61,0x74,0x28,
    0x69,0x29,0x20,0x2f,0x20,0x66,0x6c,0x6f,0x61,0x74,0x28,0x4e,0x29,0x2c,0x20,0x5f,
    0x31,0x30,0x37,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x76,0x65,0x63,0x33,0x20,0x49,0x6d,
    0x70,0x6f,0x72,0x74,0x61,0x6e,0x63,0x65,0x53,0x61,0x6d,0x70,0x6c,0x65,0x47,0x47,
    0x58,0x28,0x76,0x65,0x63,0x32,0x20,0x58,0x69,0x2c,0x20,0x76,0x65,0x63,0x33,0x20,
    0x4e,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x72,0x6f,0x75,0x67,0x68,0x6e,0x65,
    0x73,0x73,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,
    0x5f,0x31,0x31,0x34,0x20,0x3d,0x20,0x72,0x6f,0x75,0x67,0x68,0x6e,0x65,0x73,0x73,
    0x20,0x2a,0x20,0x72,0x6f,0x75,0x67,0x68,0x6e,0x65,0x73,0x73,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x32,0x30,0x20,0x3d,0x20,0x36,
    0x2e,0x32,0x38,0x33,0x31,0x38,0x35,0x34,0x38,0x32,0x30,0x32,0x35,0x31,0x34,0x36,
    0x34,0x38,0x34,0x33,0x37,0x35,0x20,0x2a,0x20,0x58,0x69,0x2e,0x78,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x33,0x35,0x20,0x3d,0x20,
    0x73,0x71,0x72,0x74,0x28,0x28,0x31,0x2e,0x30,0x20,0x2d,0x20,0x58,0x69,0x2e,0x79,
    0x29,0x20,0x2f,0x20,0x28,0x31,0x2e,0x30,0x20,0x2b,0x20,0x28,0x28,0x28,0x5f,0x31,
    0x31,0x34,0x20,0x2a,0x20,0x5f,0x31,0x31,0x34,0x29,0x20,0x2d,0x20,0x31,0x2e,0x30,
    0x29,0x20,0x2a,0x20,0x58,0x69,0x2e,0x79,0x29,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x34,0x31,0x20,0x3d,0x20,0x73,0x71,
    0x72,0x74,0x28,0x31,0x2e,0x30,0x20,0x2d,0x20,0x28,0x5f,0x31,0x33,0x35,0x20,0x2a,
    0x20,0x5f,0x31,0x33,0x35,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x62,0x76,0x65,
    0x63,0x33,0x20,0x5f,0x31,0x36,0x36,0x20,0x3d,0x20,0x62,0x76,0x65,0x63,0x33,0x28,
    0x61,0x62,0x73,0x28,0x4e,0x2e,0x7a,0x29,0x20,0x3c,0x20,0x30,0x2e,0x39,0x39,0x39,
    0x30,0x30,0x30,0x30,0x31,0x32,0x38,0x37,0x34,0x36,0x30,0x33,0x32,0x37,0x31,0x34,
    0x38,0x34,0x33,0x37,0x35,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,
    0x20,0x5f,0x31,0x37,0x32,0x20,0x3d,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,
    0x65,0x28,0x63,0x72,0x6f,0x73,0x73,0x28,0x76,0x65,0x63,0x33,0x28,0x5f,0x31,0x36,
    0x36,0x2e,0x78,0x20,0x3f,0x20,0x76,0x65,0x63,0x33,0x28,0x30,0x2e,0x30,0x2c,0x20,
    0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x2e,0x78,0x20,0x3a,0x20,0x76,0x65,
    0x63,0x33,0x28,0x31,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,
    0x29,0x2e,0x78,0x2c,0x20,0x5f,0x31,0x36,0x36,0x2e,0x79,0x20,0x3f,0x20,0x76,0x65,
    0x63,0x33,0x28,0x30,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,
    0x29,0x2e,0x79,0x20,0x3a,0x20,0x76,0x65,0x63,0x33,0x28,0x31,0x2e,0x30,0x2c,0x20,
    0x30,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x29,0x2e,0x79,0x2c,0x20,0x5f,0x31,0x36,
    0x36,0x2e,0x7a,0x20,0x3f,0x20,0x76,0x65,0x63,0x33,0x28,0x30,0x2e,0x30,0x2c,0x20,
    0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x2e,0x7a,0x20,0x3a,0x20,0x76,0x65,
    0x63,0x33,0x28,0x31,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,
    0x29,0x2e,0x7a,0x29,0x2c,0x20,0x4e,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,
    0x65,0x74,0x75,0x72,0x6e,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,
    0x28,0x28,0x5f,0x31,0x37,0x32,0x20,0x2a,0x20,0x28,0x63,0x6f,0x73,0x28,0x5f,0x31,
    0x32,0x30,0x29,0x20,0x2a,0x20,0x5f,0x31,0x34,0x31,0x29,0x29,0x20,0x2b,0x20,0x28,
    0x63,0x72,0x6f,0x73,0x73,0x28,0x4e,0x2c,0x20,0x5f,0x31,0x37,0x32,0x29,0x20,0x2a,
    0x20,0x28,0x73,0x69,0x6e,0x28,0x5f,0x31,0x32,0x30,0x29,0x20,0x2a,0x20,0x5f,0x31,
    0x34,0x31,0x29,0x29,0x29,0x20,0x2b,0x20,0x28,0x4e,0x20,0x2a,0x20,0x5f,0x31,0x33,
    0x35,0x29,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x66,0x6c,0x6f,0x61,0x74,0x20,0x47,0x65,
    0x6f,0x6d,0x65,0x74,0x72,0x79,0x53,0x63,0x68,0x6c,0x69,0x63,0x6b,0x47,0x47,0x58,
    0x28,0x66,0x6c,0x6f,0x61,0x74,0x20,0x4e,0x64,0x6f,0x74,0x56,0x2c,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x20,0x72,0x6f,0x75,0x67,0x68,0x6e,0x65,0x73,0x73,0x29,0x0a,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x32,0x30,0x33,0x20,
    0x3d,0x20,0x28,0x72,0x6f,0x75,0x67,0x68,0x6e,0x65,0x73,0x73,0x20,0x2a,0x20,0x72,
    0x6f,0x75,0x67,0x68,0x6e,0x65,0x73,0x73,0x29,0x20,0x2a,0x20,0x30,0x2e,0x35,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x4e,0x64,0x6f,0x74,
    0x56,0x20,0x2f,0x20,0x28,0x28,0x4e,0x64,0x6f,0x74,0x56,0x20,0x2a,0x20,0x28,0x31,
    0x2e,0x30,0x20,0x2d,0x20,0x5f,0x32,0x30,0x33,0x29,0x29,0x20,0x2b,0x20,0x5f,0x32,
    0x30,0x33,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x66,0x6c,0x6f,0x61,0x74,0x20,0x47,0x65,
    0x6f,0x6d,0x65,0x74,0x72,0x79,0x53,0x6d,0x69,0x74,0x68,0x28,0x76,0x65,0x63,0x33,
    0x20,0x4e,0x2c,0x20,0x76,0x65,0x63,0x33,0x20,0x56,0x2c,0x20,0x76,0x65,0x63,0x33,
    0x20,0x4c,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x72,0x6f,0x75,0x67,0x68,0x6e,
    0x65,0x73,0x73,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x6d,0x61,0x78,0x28,0x64,0x6f,0x74,
    0x28,0x4e,0x2c,0x20,0x56,0x29,0x2c,0x20,0x30,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x20,
    0x3d,0x20,0x72,0x6f,0x75,0x67,0x68,0x6e,0x65,0x73,0x73,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x20,0x3d,
    0x20,0x6d,0x61,0x78,0x28,0x64,0x6f,0x74,0x28,0x4e,0x2c,0x20,0x4c,0x29,0x2c,0x20,
    0x30,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,
    0x70,0x61,0x72,0x61,0x6d,0x5f,0x33,0x20,0x3d,0x20,0x72,0x6f,0x75,0x67,0x68,0x6e,
    0x65,0x73,0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,
    0x47,0x65,0x6f,0x6d,0x65,0x74,0x72,0x79,0x53,0x63,0x68,0x6c,0x69,0x63,0x6b,0x47,
    0x47,0x58,0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x2c,0x20,0x70,0x61,0x72,0x61,
    0x6d,0x5f,0x33,0x29,0x20,0x2a,0x20,0x47,0x65,0x6f,0x6d,0x65,0x74,0x72,0x79,0x53,
    0x63,0x68,0x6c,0x69,0x63,0x6b,0x47,0x47,0x58,0x28,0x70,0x61,0x72,0x61,0x6d,0x2c,
    0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x76,0x65,
    0x63,0x32,0x20,0x49,0x6e,0x74,0x65,0x67,0x72,0x61,0x74,0x65,0x42,0x52,0x44,0x46,
    0x28,0x66,0x6c,0x6f,0x61,0x74,0x20,0x4e,0x64,0x6f,0x74,0x56,0x2c,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x20,0x72,0x6f,0x75,0x67,0x68,0x6e,0x65,0x73,0x73,0x29,0x0a,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x33,0x38,0x35,0x20,0x3d,
    0x20,0x76,0x65,0x63,0x33,0x28,0x30,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x5f,0x33,0x38,0x35,0x2e,0x78,0x20,0x3d,0x20,0x73,0x71,0x72,0x74,0x28,0x31,0x2e,
    0x30,0x20,0x2d,0x20,0x28,0x4e,0x64,0x6f,0x74,0x56,0x20,0x2a,0x20,0x4e,0x64,0x6f,
    0x74,0x56,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,
    0x33,0x38,0x37,0x20,0x3d,0x20,0x5f,0x33,0x38,0x35,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x5f,0x33,0x38,0x37,0x2e,0x79,0x20,0x3d,0x20,0x30,0x2e,0x30,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x33,0x38,0x39,0x20,0x3d,0x20,0x5f,0x33,
    0x38,0x37,0x3b,0x0a,0x20,0x20,0x20,0x20,0x5f,0x33,0x38,0x39,0x2e,0x7a,0x20,0x3d,
    0x20,0x4e,0x64,0x6f,0x74,0x56,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x20,0x41,0x20,0x3d,0x20,0x30,0x2e,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x20,0x42,0x20,0x3d,0x20,0x30,0x2e,0x30,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6f,0x72,0x20,0x28,0x75,0x69,0x6e,0x74,0x20,0x69,0x20,0x3d,0x20,
    0x30,0x75,0x3b,0x20,0x69,0x20,0x3c,0x20,0x31,0x30,0x32,0x34,0x75,0x3b,0x20,0x69,
    0x2b,0x2b,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x75,0x69,0x6e,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x69,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x20,0x70,
    0x61,0x72,0x61,0x6d,0x5f,0x31,0x20,0x3d,0x20,0x31,0x30,0x32,0x34,0x75,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x32,0x20,0x70,0x61,0x72,
    0x61,0x6d,0x5f,0x32,0x20,0x3d,0x20,0x48,0x61,0x6d,0x6d,0x65,0x72,0x73,0x6c,0x65,
    0x79,0x28,0x70,0x61,0x72,0x61,0x6d,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,
    0x70,0x61,0x72,0x61,0x6d,0x5f,0x33,0x20,0x3d,0x20,0x76,0x65,0x63,0x33,0x28,0x30,
    0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,0x72,
    0x61,0x6d,0x5f,0x34,0x20,0x3d,0x20,0x72,0x6f,0x75,0x67,0x68,0x6e,0x65,0x73,0x73,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,
    0x32,0x38,0x30,0x20,0x3d,0x20,0x49,0x6d,0x70,0x6f,0x72,0x74,0x61,0x6e,0x63,0x65,
    0x53,0x61,0x6d,0x70,0x6c,0x65,0x47,0x47,0x58,0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,
    0x32,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x33,0x2c,0x20,0x70,0x61,0x72,0x61,
    0x6d,0x5f,0x34,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x20,0x5f,0x32,0x38,0x34,0x20,0x3d,0x20,0x64,0x6f,0x74,0x28,0x5f,
    0x33,0x38,0x39,0x2c,0x20,0x5f,0x32,0x38,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x32,0x39,0x30,0x20,0x3d,0x20,
    0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x28,0x5f,0x32,0x38,0x30,0x20,
    0x2a,0x20,0x28,0x32,0x2e,0x30,0x20,0x2a,0x20,0x5f,0x32,0x38,0x34,0x29,0x29,0x20,
    0x2d,0x20,0x5f,0x33,0x38,0x39,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x33,0x30,0x33,0x20,0x3d,0x20,0x6d,0x61,
    0x78,0x28,0x5f,0x32,0x38,0x34,0x2c,0x20,0x30,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x6d,0x61,0x78,0x28,0x5f,0x32,
    0x39,0x30,0x2e,0x7a,0x2c,0x20,0x30,0x2e,0x30,0x29,0x20,0x3e,0x20,0x30,0x2e,0x30,
    0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x61,0x72,
    0x61,0x6d,0x5f,0x35,0x20,0x3d,0x20,0x76,0x65,0x63,0x33,0x28,0x30,0x2e,0x30,0x2c,
    0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x61,0x72,
    0x61,0x6d,0x5f,0x36,0x20,0x3d,0x20,0x5f,0x33,0x38,0x39,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x61,
    0x72,0x61,0x6d,0x5f,0x37,0x20,0x3d,0x20,0x5f,0x32,0x39,0x30,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,
    0x70,0x61,0x72,0x61,0x6d,0x5f,0x38,0x20,0x3d,0x20,0x72,0x6f,0x75,0x67,0x68,0x6e,
    0x65,0x73,0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x33,0x32,0x35,0x20,0x3d,0x20,0x28,0x47,
    0x65,0x6f,0x6d,0x65,0x74,0x72,0x79,0x53,0x6d,0x69,0x74,0x68,0x28,0x70,0x61,0x72,
    0x61,0x6d,0x5f,0x35,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x36,0x2c,0x20,0x70,
    0x61,0x72,0x61,0x6d,0x5f,0x37,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x38,0x29,
    0x20,0x2a,0x20,0x5f,0x33,0x30,0x33,0x29,0x20,0x2f,0x20,0x28,0x6d,0x61,0x78,0x28,
    0x5f,0x32,0x38,0x30,0x2e,0x7a,0x2c,0x20,0x30,0x2e,0x30,0x29,0x20,0x2a,0x20,0x4e,
    0x64,0x6f,0x74,0x56,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x33,0x33,0x30,0x20,0x3d,0x20,
    0x70,0x6f,0x77,0x28,0x31,0x2e,0x30,0x20,0x2d,0x20,0x5f,0x33,0x30,0x33,0x2c,0x20,
    0x35,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x41,0x20,0x2b,0x3d,0x20,0x28,0x28,0x31,0x2e,0x30,0x20,0x2d,0x20,0x5f,
    0x33,0x33,0x30,0x29,0x20,0x2a,0x20,0x5f,0x33,0x32,0x35,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x42,0x20,0x2b,0x3d,0x20,0x28,
    0x5f,0x33,0x33,0x30,0x20,0x2a,0x20,0x5f,0x33,0x32,0x35,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x33,0x34,0x37,0x20,0x3d,0x20,0x41,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x33,0x34,0x38,
    0x20,0x3d,0x20,0x5f,0x33,0x34,0x37,0x20,0x2a,0x20,0x30,0x2e,0x30,0x30,0x30,0x39,
    0x37,0x36,0x35,0x36,0x32,0x35,0x3b,0x0a,0x20,0x20,0x20,0x20,0x41,0x20,0x3d,0x20,
    0x5f,0x33,0x34,0x38,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,
    0x5f,0x33,0x34,0x39,0x20,0x3d,0x20,0x42,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x20,0x5f,0x33,0x35,0x30,0x20,0x3d,0x20,0x5f,0x33,0x34,0x39,0x20,
    0x2a,0x20,0x30,0x2e,0x30,0x30,0x30,0x39,0x37,0x36,0x35,0x36,0x32,0x35,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x42,0x20,0x3d,0x20,0x5f,0x33,0x35,0x30,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x76,0x65,0x63,0x32,0x28,0x5f,0x33,
    0x34,0x38,0x2c,0x20,0x5f,0x33,0x35,0x30,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x76,0x6f,
    0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x76,0x5f,
    0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x20,0x3d,0x20,
    0x76,0x5f,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x2e,0x79,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,
    0x63,0x34,0x28,0x49,0x6e,0x74,0x65,0x67,0x72,0x61,0x74,0x65,0x42,0x52,0x44,0x46,
    0x28,0x70,0x61,0x72,0x61,0x6d,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x29,
    0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,
    0x00,
};
#if !defined(SOKOL_GFX_INCLUDED)
  #error "Please include sokol_gfx.h before shaders.glsl.h"
#endif
static inline const sg_shader_desc* pbr_brdf_lut_shader_desc(sg_backend backend) {
  if (backend == SG_BACKEND_GLCORE33) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "position";
      desc.attrs[1].name = "texcoord";
      desc.vs.source = brdf_lut_vs_source_glsl330;
      desc.vs.entry = "main";
      desc.fs.source = brdf_lut_fs_source_glsl330;
      desc.fs.entry = "main";
      desc.label = "pbr_brdf_lut_shader";
    }
    return &desc;
  }
  return 0;
}
static inline const sg_shader_desc* pbr_diffuse_irradiance_shader_desc(sg_backend backend) {
  if (backend == SG_BACKEND_GLCORE33) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "position";
      desc.vs.source = cubemap_vs_source_glsl330;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 128;
      desc.vs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.vs.uniform_blocks[0].uniforms[0].name = "cubemap_uniforms";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 8;
      desc.fs.source = diffuse_irradiance_fs_source_glsl330;
      desc.fs.entry = "main";
      desc.fs.images[0].name = "env_map";
      desc.fs.images[0].image_type = SG_IMAGETYPE_CUBE;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "pbr_diffuse_irradiance_shader";
    }
    return &desc;
  }
  return 0;
}
static inline const sg_shader_desc* pbr_display_shader_desc(sg_backend backend) {
  if (backend == SG_BACKEND_GLCORE33) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "position";
      desc.attrs[1].name = "texcoord";
      desc.vs.source = display_vs_source_glsl330;
      desc.vs.entry = "main";
      desc.fs.source = display_fs_source_glsl330;
      desc.fs.entry = "main";
      desc.fs.images[0].name = "tex_cube";
      desc.fs.images[0].image_type = SG_IMAGETYPE_CUBE;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "pbr_display_shader";
    }
    return &desc;
  }
  return 0;
}
static inline const sg_shader_desc* pbr_prefilter_shader_desc(sg_backend backend) {
  if (backend == SG_BACKEND_GLCORE33) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "position";
      desc.vs.source = prefilter_vs_source_glsl330;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 128;
      desc.vs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.vs.uniform_blocks[0].uniforms[0].name = "cubemap_uniforms";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 8;
      desc.fs.source = prefilter_fs_source_glsl330;
      desc.fs.entry = "main";
      desc.fs.uniform_blocks[0].size = 16;
      desc.fs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.fs.uniform_blocks[0].uniforms[0].name = "prefilter_uniforms";
      desc.fs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.fs.uniform_blocks[0].uniforms[0].array_count = 1;
      desc.fs.images[0].name = "tex_cube";
      desc.fs.images[0].image_type = SG_IMAGETYPE_CUBE;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "pbr_prefilter_shader";
    }
    return &desc;
  }
  return 0;
}
static inline const sg_shader_desc* pbr_shader_shader_desc(sg_backend backend) {
  if (backend == SG_BACKEND_GLCORE33) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "position";
      desc.vs.source = cubemap_vs_source_glsl330;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 128;
      desc.vs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.vs.uniform_blocks[0].uniforms[0].name = "cubemap_uniforms";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 8;
      desc.fs.source = cubemap_fs_source_glsl330;
      desc.fs.entry = "main";
      desc.fs.images[0].name = "tex";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "pbr_shader_shader";
    }
    return &desc;
  }
  return 0;
}
